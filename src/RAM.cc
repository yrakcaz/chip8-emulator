#include "../includes/RAM.hh"

uint8_t fonts[80] =
{
    0xF0, 0x90, 0x90, 0x90, 0xF0,
    0x20, 0x60, 0x20, 0x20, 0x70,
    0xF0, 0x10, 0xF0, 0x80, 0xF0,
    0xF0, 0x10, 0xF0, 0x10, 0xF0,
    0x90, 0x90, 0xF0, 0x10, 0x10,
    0xF0, 0x80, 0xF0, 0x10, 0xF0,
    0xF0, 0x80, 0xF0, 0x90, 0xF0,
    0xF0, 0x10, 0x20, 0x40, 0x40,
    0xF0, 0x90, 0xF0, 0x90, 0xF0,
    0xF0, 0x90, 0xF0, 0x10, 0xF0,
    0xF0, 0x90, 0xF0, 0x90, 0x90,
    0xE0, 0x90, 0xE0, 0x90, 0xE0,
    0xF0, 0x80, 0x80, 0x80, 0xF0,
    0xE0, 0x90, 0x90, 0x90, 0xE0,
    0xF0, 0x80, 0xF0, 0x80, 0xF0,
    0xF0, 0x80, 0xF0, 0x80, 0x80
};

RAM::RAM()
{
}

RAM::RAM(char* file)
{
    for (int i = 0; i < RAM_SIZE; i++)
    {
        if (i < SPRITES_SIZE)
            ram_[i] = fonts[i];
        else
            ram_[i] = 0;
    }
    int pos = RAM_BEGIN;
    FILE *f = fopen(file, "r");
    if (f == (FILE *)0)
    {
        printf("File opening error ocurred. Exiting program.\n");
        exit(1);
    }
    int c = fgetc(f);
    while (c != EOF)
    {
        ram_[pos] = (uint8_t)c;
        pos++;
        c = fgetc(f);
    }
    fclose(f);
}

RAM::~RAM()
{
}

uint8_t RAM::ram_get(int i)
{
    return ram_[i];
}

void RAM::ram_set(int i, uint8_t val)
{
    ram_[i] = val;
}

void RAM::print()
{
    for (int i = 0; i < RAM_SIZE; i++)
    {
        printf("%x", (ram_[i] & 0xF0) >> 4);
        printf("%x ", ram_[i] & 0x0F);
        if (i % 32 == 0 && i)
        {
            std::cout << std::endl;
            continue;
        }
    }
}
